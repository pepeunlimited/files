// Code generated by entc, DO NOT EDIT.

package buckets

import (
	"github.com/pepeunlimited/files/internal/pkg/ent/predicate"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Buckets {
	return predicate.Buckets(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	},
	)
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	},
	)
}

// Endpoint applies equality check predicate on the "endpoint" field. It's identical to EndpointEQ.
func Endpoint(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndpoint), v))
	},
	)
}

// CdnEndpoint applies equality check predicate on the "cdn_endpoint" field. It's identical to CdnEndpointEQ.
func CdnEndpoint(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	},
	)
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	},
	)
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	},
	)
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Buckets {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Buckets(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	},
	)
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Buckets {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Buckets(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	},
	)
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	},
	)
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	},
	)
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	},
	)
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	},
	)
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	},
	)
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	},
	)
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	},
	)
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	},
	)
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	},
	)
}

// EndpointEQ applies the EQ predicate on the "endpoint" field.
func EndpointEQ(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndpoint), v))
	},
	)
}

// EndpointNEQ applies the NEQ predicate on the "endpoint" field.
func EndpointNEQ(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndpoint), v))
	},
	)
}

// EndpointIn applies the In predicate on the "endpoint" field.
func EndpointIn(vs ...string) predicate.Buckets {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Buckets(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndpoint), v...))
	},
	)
}

// EndpointNotIn applies the NotIn predicate on the "endpoint" field.
func EndpointNotIn(vs ...string) predicate.Buckets {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Buckets(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndpoint), v...))
	},
	)
}

// EndpointGT applies the GT predicate on the "endpoint" field.
func EndpointGT(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndpoint), v))
	},
	)
}

// EndpointGTE applies the GTE predicate on the "endpoint" field.
func EndpointGTE(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndpoint), v))
	},
	)
}

// EndpointLT applies the LT predicate on the "endpoint" field.
func EndpointLT(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndpoint), v))
	},
	)
}

// EndpointLTE applies the LTE predicate on the "endpoint" field.
func EndpointLTE(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndpoint), v))
	},
	)
}

// EndpointContains applies the Contains predicate on the "endpoint" field.
func EndpointContains(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEndpoint), v))
	},
	)
}

// EndpointHasPrefix applies the HasPrefix predicate on the "endpoint" field.
func EndpointHasPrefix(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEndpoint), v))
	},
	)
}

// EndpointHasSuffix applies the HasSuffix predicate on the "endpoint" field.
func EndpointHasSuffix(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEndpoint), v))
	},
	)
}

// EndpointEqualFold applies the EqualFold predicate on the "endpoint" field.
func EndpointEqualFold(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEndpoint), v))
	},
	)
}

// EndpointContainsFold applies the ContainsFold predicate on the "endpoint" field.
func EndpointContainsFold(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEndpoint), v))
	},
	)
}

// CdnEndpointEQ applies the EQ predicate on the "cdn_endpoint" field.
func CdnEndpointEQ(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CdnEndpointNEQ applies the NEQ predicate on the "cdn_endpoint" field.
func CdnEndpointNEQ(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CdnEndpointIn applies the In predicate on the "cdn_endpoint" field.
func CdnEndpointIn(vs ...string) predicate.Buckets {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Buckets(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCdnEndpoint), v...))
	},
	)
}

// CdnEndpointNotIn applies the NotIn predicate on the "cdn_endpoint" field.
func CdnEndpointNotIn(vs ...string) predicate.Buckets {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Buckets(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCdnEndpoint), v...))
	},
	)
}

// CdnEndpointGT applies the GT predicate on the "cdn_endpoint" field.
func CdnEndpointGT(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CdnEndpointGTE applies the GTE predicate on the "cdn_endpoint" field.
func CdnEndpointGTE(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CdnEndpointLT applies the LT predicate on the "cdn_endpoint" field.
func CdnEndpointLT(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CdnEndpointLTE applies the LTE predicate on the "cdn_endpoint" field.
func CdnEndpointLTE(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CdnEndpointContains applies the Contains predicate on the "cdn_endpoint" field.
func CdnEndpointContains(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CdnEndpointHasPrefix applies the HasPrefix predicate on the "cdn_endpoint" field.
func CdnEndpointHasPrefix(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CdnEndpointHasSuffix applies the HasSuffix predicate on the "cdn_endpoint" field.
func CdnEndpointHasSuffix(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CdnEndpointIsNil applies the IsNil predicate on the "cdn_endpoint" field.
func CdnEndpointIsNil() predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCdnEndpoint)))
	},
	)
}

// CdnEndpointNotNil applies the NotNil predicate on the "cdn_endpoint" field.
func CdnEndpointNotNil() predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCdnEndpoint)))
	},
	)
}

// CdnEndpointEqualFold applies the EqualFold predicate on the "cdn_endpoint" field.
func CdnEndpointEqualFold(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CdnEndpointContainsFold applies the ContainsFold predicate on the "cdn_endpoint" field.
func CdnEndpointContainsFold(v string) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCdnEndpoint), v))
	},
	)
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Buckets {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Buckets(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	},
	)
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Buckets {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Buckets(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	},
	)
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	},
	)
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FilesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	},
	)
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.Files) predicate.Buckets {
	return predicate.Buckets(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FilesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Buckets) predicate.Buckets {
	return predicate.Buckets(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for _, p := range predicates {
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Buckets) predicate.Buckets {
	return predicate.Buckets(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for i, p := range predicates {
				if i > 0 {
					s1.Or()
				}
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Buckets) predicate.Buckets {
	return predicate.Buckets(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
