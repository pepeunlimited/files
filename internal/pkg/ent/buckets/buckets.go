// Code generated by entc, DO NOT EDIT.

package buckets

import (
	"github.com/pepeunlimited/files/internal/pkg/ent/schema"
)

const (
	// Label holds the string label denoting the buckets type in the database.
	Label = "buckets"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name vertex property in the database.
	FieldName = "name"
	// FieldEndpoint holds the string denoting the endpoint vertex property in the database.
	FieldEndpoint = "endpoint"
	// FieldCdnEndpoint holds the string denoting the cdn_endpoint vertex property in the database.
	FieldCdnEndpoint = "cdn_endpoint"
	// FieldCreatedAt holds the string denoting the created_at vertex property in the database.
	FieldCreatedAt = "created_at"

	// Table holds the table name of the buckets in the database.
	Table = "buckets"
	// FilesTable is the table the holds the files relation/edge.
	FilesTable = "files"
	// FilesInverseTable is the table name for the Files entity.
	// It exists in this package in order to avoid circular dependency with the "files" package.
	FilesInverseTable = "files"
	// FilesColumn is the table column denoting the files relation/edge.
	FilesColumn = "buckets_id"
)

// Columns holds all SQL columns for buckets fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEndpoint,
	FieldCdnEndpoint,
	FieldCreatedAt,
}

var (
	fields = schema.Buckets{}.Fields()

	// descName is the schema descriptor for name field.
	descName = fields[0].Descriptor()
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator = func() func(string) error {
		validators := descName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()

	// descEndpoint is the schema descriptor for endpoint field.
	descEndpoint = fields[1].Descriptor()
	// EndpointValidator is a validator for the "endpoint" field. It is called by the builders before save.
	EndpointValidator = func() func(string) error {
		validators := descEndpoint.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(endpoint string) error {
			for _, fn := range fns {
				if err := fn(endpoint); err != nil {
					return err
				}
			}
			return nil
		}
	}()
)
