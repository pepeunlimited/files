// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/pepeunlimited/files/internal/pkg/ent/migrate"

	"github.com/pepeunlimited/files/internal/pkg/ent/bucket"
	"github.com/pepeunlimited/files/internal/pkg/ent/file"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bucket is the client for interacting with the Bucket builders.
	Bucket *BucketClient
	// File is the client for interacting with the File builders.
	File *FileClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	c := config{log: log.Println}
	c.options(opts...)
	return &Client{
		config: c,
		Schema: migrate.NewSchema(c.driver),
		Bucket: NewBucketClient(c),
		File:   NewFileClient(c),
	}
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug}
	return &Tx{
		config: cfg,
		Bucket: NewBucketClient(cfg),
		File:   NewFileClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bucket.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true}
	return &Client{
		config: cfg,
		Schema: migrate.NewSchema(cfg.driver),
		Bucket: NewBucketClient(cfg),
		File:   NewFileClient(cfg),
	}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// BucketClient is a client for the Bucket schema.
type BucketClient struct {
	config
}

// NewBucketClient returns a client for the Bucket from the given config.
func NewBucketClient(c config) *BucketClient {
	return &BucketClient{config: c}
}

// Create returns a create builder for Bucket.
func (c *BucketClient) Create() *BucketCreate {
	return &BucketCreate{config: c.config}
}

// Update returns an update builder for Bucket.
func (c *BucketClient) Update() *BucketUpdate {
	return &BucketUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *BucketClient) UpdateOne(b *Bucket) *BucketUpdateOne {
	return c.UpdateOneID(b.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *BucketClient) UpdateOneID(id int) *BucketUpdateOne {
	return &BucketUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for Bucket.
func (c *BucketClient) Delete() *BucketDelete {
	return &BucketDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BucketClient) DeleteOne(b *Bucket) *BucketDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BucketClient) DeleteOneID(id int) *BucketDeleteOne {
	return &BucketDeleteOne{c.Delete().Where(bucket.ID(id))}
}

// Create returns a query builder for Bucket.
func (c *BucketClient) Query() *BucketQuery {
	return &BucketQuery{config: c.config}
}

// Get returns a Bucket entity by its id.
func (c *BucketClient) Get(ctx context.Context, id int) (*Bucket, error) {
	return c.Query().Where(bucket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BucketClient) GetX(ctx context.Context, id int) *Bucket {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryFiles queries the files edge of a Bucket.
func (c *BucketClient) QueryFiles(b *Bucket) *FileQuery {
	query := &FileQuery{config: c.config}
	id := b.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(bucket.Table, bucket.FieldID, id),
		sqlgraph.To(file.Table, file.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, bucket.FilesTable, bucket.FilesColumn),
	)
	query.sql = sqlgraph.Neighbors(b.driver.Dialect(), step)

	return query
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Create returns a create builder for File.
func (c *FileClient) Create() *FileCreate {
	return &FileCreate{config: c.config}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	return &FileUpdate{config: c.config}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	return c.UpdateOneID(f.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id int) *FileUpdateOne {
	return &FileUpdateOne{config: c.config, id: id}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	return &FileDelete{config: c.config}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FileClient) DeleteOneID(id int) *FileDeleteOne {
	return &FileDeleteOne{c.Delete().Where(file.ID(id))}
}

// Create returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{config: c.config}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id int) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id int) *File {
	f, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return f
}

// QueryBuckets queries the buckets edge of a File.
func (c *FileClient) QueryBuckets(f *File) *BucketQuery {
	query := &BucketQuery{config: c.config}
	id := f.ID
	step := sqlgraph.NewStep(
		sqlgraph.From(file.Table, file.FieldID, id),
		sqlgraph.To(bucket.Table, bucket.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, file.BucketsTable, file.BucketsColumn),
	)
	query.sql = sqlgraph.Neighbors(f.driver.Dialect(), step)

	return query
}
