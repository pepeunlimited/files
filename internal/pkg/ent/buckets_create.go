// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/pepeunlimited/files/internal/pkg/ent/buckets"
	"github.com/pepeunlimited/files/internal/pkg/ent/files"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BucketsCreate is the builder for creating a Buckets entity.
type BucketsCreate struct {
	config
	name         *string
	endpoint     *string
	cdn_endpoint *string
	created_at   *time.Time
	files        map[int]struct{}
}

// SetName sets the name field.
func (bc *BucketsCreate) SetName(s string) *BucketsCreate {
	bc.name = &s
	return bc
}

// SetEndpoint sets the endpoint field.
func (bc *BucketsCreate) SetEndpoint(s string) *BucketsCreate {
	bc.endpoint = &s
	return bc
}

// SetCdnEndpoint sets the cdn_endpoint field.
func (bc *BucketsCreate) SetCdnEndpoint(s string) *BucketsCreate {
	bc.cdn_endpoint = &s
	return bc
}

// SetNillableCdnEndpoint sets the cdn_endpoint field if the given value is not nil.
func (bc *BucketsCreate) SetNillableCdnEndpoint(s *string) *BucketsCreate {
	if s != nil {
		bc.SetCdnEndpoint(*s)
	}
	return bc
}

// SetCreatedAt sets the created_at field.
func (bc *BucketsCreate) SetCreatedAt(t time.Time) *BucketsCreate {
	bc.created_at = &t
	return bc
}

// AddFileIDs adds the files edge to Files by ids.
func (bc *BucketsCreate) AddFileIDs(ids ...int) *BucketsCreate {
	if bc.files == nil {
		bc.files = make(map[int]struct{})
	}
	for i := range ids {
		bc.files[ids[i]] = struct{}{}
	}
	return bc
}

// AddFiles adds the files edges to Files.
func (bc *BucketsCreate) AddFiles(f ...*Files) *BucketsCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return bc.AddFileIDs(ids...)
}

// Save creates the Buckets in the database.
func (bc *BucketsCreate) Save(ctx context.Context) (*Buckets, error) {
	if bc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if err := buckets.NameValidator(*bc.name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
	}
	if bc.endpoint == nil {
		return nil, errors.New("ent: missing required field \"endpoint\"")
	}
	if err := buckets.EndpointValidator(*bc.endpoint); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"endpoint\": %v", err)
	}
	if bc.created_at == nil {
		return nil, errors.New("ent: missing required field \"created_at\"")
	}
	return bc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BucketsCreate) SaveX(ctx context.Context) *Buckets {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bc *BucketsCreate) sqlSave(ctx context.Context) (*Buckets, error) {
	var (
		b     = &Buckets{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: buckets.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: buckets.FieldID,
			},
		}
	)
	if value := bc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: buckets.FieldName,
		})
		b.Name = *value
	}
	if value := bc.endpoint; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: buckets.FieldEndpoint,
		})
		b.Endpoint = *value
	}
	if value := bc.cdn_endpoint; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: buckets.FieldCdnEndpoint,
		})
		b.CdnEndpoint = value
	}
	if value := bc.created_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: buckets.FieldCreatedAt,
		})
		b.CreatedAt = *value
	}
	if nodes := bc.files; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   buckets.FilesTable,
			Columns: []string{buckets.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: files.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	b.ID = int(id)
	return b, nil
}
