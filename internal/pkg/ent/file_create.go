// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/files/internal/pkg/ent/bucket"
	"github.com/pepeunlimited/files/internal/pkg/ent/file"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	filename   *string
	mime_type  *string
	file_size  *int64
	is_draft   *bool
	is_deleted *bool
	user_id    *int64
	created_at *time.Time
	updated_at *time.Time
	buckets    map[int]struct{}
}

// SetFilename sets the filename field.
func (fc *FileCreate) SetFilename(s string) *FileCreate {
	fc.filename = &s
	return fc
}

// SetMimeType sets the mime_type field.
func (fc *FileCreate) SetMimeType(s string) *FileCreate {
	fc.mime_type = &s
	return fc
}

// SetFileSize sets the file_size field.
func (fc *FileCreate) SetFileSize(i int64) *FileCreate {
	fc.file_size = &i
	return fc
}

// SetIsDraft sets the is_draft field.
func (fc *FileCreate) SetIsDraft(b bool) *FileCreate {
	fc.is_draft = &b
	return fc
}

// SetNillableIsDraft sets the is_draft field if the given value is not nil.
func (fc *FileCreate) SetNillableIsDraft(b *bool) *FileCreate {
	if b != nil {
		fc.SetIsDraft(*b)
	}
	return fc
}

// SetIsDeleted sets the is_deleted field.
func (fc *FileCreate) SetIsDeleted(b bool) *FileCreate {
	fc.is_deleted = &b
	return fc
}

// SetNillableIsDeleted sets the is_deleted field if the given value is not nil.
func (fc *FileCreate) SetNillableIsDeleted(b *bool) *FileCreate {
	if b != nil {
		fc.SetIsDeleted(*b)
	}
	return fc
}

// SetUserID sets the user_id field.
func (fc *FileCreate) SetUserID(i int64) *FileCreate {
	fc.user_id = &i
	return fc
}

// SetCreatedAt sets the created_at field.
func (fc *FileCreate) SetCreatedAt(t time.Time) *FileCreate {
	fc.created_at = &t
	return fc
}

// SetUpdatedAt sets the updated_at field.
func (fc *FileCreate) SetUpdatedAt(t time.Time) *FileCreate {
	fc.updated_at = &t
	return fc
}

// SetBucketsID sets the buckets edge to Bucket by id.
func (fc *FileCreate) SetBucketsID(id int) *FileCreate {
	if fc.buckets == nil {
		fc.buckets = make(map[int]struct{})
	}
	fc.buckets[id] = struct{}{}
	return fc
}

// SetNillableBucketsID sets the buckets edge to Bucket by id if the given value is not nil.
func (fc *FileCreate) SetNillableBucketsID(id *int) *FileCreate {
	if id != nil {
		fc = fc.SetBucketsID(*id)
	}
	return fc
}

// SetBuckets sets the buckets edge to Bucket.
func (fc *FileCreate) SetBuckets(b *Bucket) *FileCreate {
	return fc.SetBucketsID(b.ID)
}

// Save creates the File in the database.
func (fc *FileCreate) Save(ctx context.Context) (*File, error) {
	if fc.filename == nil {
		return nil, errors.New("ent: missing required field \"filename\"")
	}
	if err := file.FilenameValidator(*fc.filename); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"filename\": %v", err)
	}
	if fc.mime_type == nil {
		return nil, errors.New("ent: missing required field \"mime_type\"")
	}
	if err := file.MimeTypeValidator(*fc.mime_type); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"mime_type\": %v", err)
	}
	if fc.file_size == nil {
		return nil, errors.New("ent: missing required field \"file_size\"")
	}
	if fc.is_draft == nil {
		v := file.DefaultIsDraft
		fc.is_draft = &v
	}
	if fc.is_deleted == nil {
		v := file.DefaultIsDeleted
		fc.is_deleted = &v
	}
	if fc.user_id == nil {
		return nil, errors.New("ent: missing required field \"user_id\"")
	}
	if fc.created_at == nil {
		return nil, errors.New("ent: missing required field \"created_at\"")
	}
	if fc.updated_at == nil {
		return nil, errors.New("ent: missing required field \"updated_at\"")
	}
	if len(fc.buckets) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"buckets\"")
	}
	return fc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FileCreate) SaveX(ctx context.Context) *File {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fc *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	var (
		f     = &File{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: file.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: file.FieldID,
			},
		}
	)
	if value := fc.filename; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldFilename,
		})
		f.Filename = *value
	}
	if value := fc.mime_type; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: file.FieldMimeType,
		})
		f.MimeType = *value
	}
	if value := fc.file_size; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: file.FieldFileSize,
		})
		f.FileSize = *value
	}
	if value := fc.is_draft; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: file.FieldIsDraft,
		})
		f.IsDraft = *value
	}
	if value := fc.is_deleted; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: file.FieldIsDeleted,
		})
		f.IsDeleted = *value
	}
	if value := fc.user_id; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  *value,
			Column: file.FieldUserID,
		})
		f.UserID = *value
	}
	if value := fc.created_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: file.FieldCreatedAt,
		})
		f.CreatedAt = *value
	}
	if value := fc.updated_at; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: file.FieldUpdatedAt,
		})
		f.UpdatedAt = *value
	}
	if nodes := fc.buckets; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   file.BucketsTable,
			Columns: []string{file.BucketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bucket.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	f.ID = int(id)
	return f, nil
}
