// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/files/internal/pkg/ent/bucket"
)

// Bucket is the model entity for the Bucket schema.
type Bucket struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Endpoint holds the value of the "endpoint" field.
	Endpoint string `json:"endpoint,omitempty"`
	// CdnEndpoint holds the value of the "cdn_endpoint" field.
	CdnEndpoint *string `json:"cdn_endpoint,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BucketQuery when eager-loading is set.
	Edges BucketEdges `json:"edges"`
}

// BucketEdges holds the relations/edges for other nodes in the graph.
type BucketEdges struct {
	// Files holds the value of the files edge.
	Files []*File
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e BucketEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[0] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bucket) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // endpoint
		&sql.NullString{}, // cdn_endpoint
		&sql.NullTime{},   // created_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bucket fields.
func (b *Bucket) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bucket.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		b.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field endpoint", values[1])
	} else if value.Valid {
		b.Endpoint = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field cdn_endpoint", values[2])
	} else if value.Valid {
		b.CdnEndpoint = new(string)
		*b.CdnEndpoint = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[3])
	} else if value.Valid {
		b.CreatedAt = value.Time
	}
	return nil
}

// QueryFiles queries the files edge of the Bucket.
func (b *Bucket) QueryFiles() *FileQuery {
	return (&BucketClient{b.config}).QueryFiles(b)
}

// Update returns a builder for updating this Bucket.
// Note that, you need to call Bucket.Unwrap() before calling this method, if this Bucket
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bucket) Update() *BucketUpdateOne {
	return (&BucketClient{b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Bucket) Unwrap() *Bucket {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bucket is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bucket) String() string {
	var builder strings.Builder
	builder.WriteString("Bucket(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", name=")
	builder.WriteString(b.Name)
	builder.WriteString(", endpoint=")
	builder.WriteString(b.Endpoint)
	if v := b.CdnEndpoint; v != nil {
		builder.WriteString(", cdn_endpoint=")
		builder.WriteString(*v)
	}
	builder.WriteString(", created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Buckets is a parsable slice of Bucket.
type Buckets []*Bucket

func (b Buckets) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
