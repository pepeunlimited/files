// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/files/internal/app/app1/ent/files"
	"github.com/pepeunlimited/files/internal/app/app1/ent/predicate"
)

// FilesDelete is the builder for deleting a Files entity.
type FilesDelete struct {
	config
	predicates []predicate.Files
}

// Where adds a new predicate to the delete builder.
func (fd *FilesDelete) Where(ps ...predicate.Files) *FilesDelete {
	fd.predicates = append(fd.predicates, ps...)
	return fd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fd *FilesDelete) Exec(ctx context.Context) (int, error) {
	return fd.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (fd *FilesDelete) ExecX(ctx context.Context) int {
	n, err := fd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fd *FilesDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: files.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: files.FieldID,
			},
		},
	}
	if ps := fd.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, fd.driver, _spec)
}

// FilesDeleteOne is the builder for deleting a single Files entity.
type FilesDeleteOne struct {
	fd *FilesDelete
}

// Exec executes the deletion query.
func (fdo *FilesDeleteOne) Exec(ctx context.Context) error {
	n, err := fdo.fd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &ErrNotFound{files.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fdo *FilesDeleteOne) ExecX(ctx context.Context) {
	fdo.fd.ExecX(ctx)
}
