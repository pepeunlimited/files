// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/files/internal/app/app1/ent/spaces"
)

// Spaces is the model entity for the Spaces schema.
type Spaces struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Endpoint holds the value of the "endpoint" field.
	Endpoint string `json:"endpoint,omitempty"`
	// CdnEndpoint holds the value of the "cdn_endpoint" field.
	CdnEndpoint *string `json:"cdn_endpoint,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Spaces) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},
		&sql.NullString{},
		&sql.NullString{},
		&sql.NullString{},
		&sql.NullTime{},
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Spaces fields.
func (s *Spaces) assignValues(values ...interface{}) error {
	if m, n := len(values), len(spaces.Columns); m != n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		s.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field endpoint", values[1])
	} else if value.Valid {
		s.Endpoint = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field cdn_endpoint", values[2])
	} else if value.Valid {
		s.CdnEndpoint = new(string)
		*s.CdnEndpoint = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[3])
	} else if value.Valid {
		s.CreatedAt = value.Time
	}
	return nil
}

// QueryFiles queries the files edge of the Spaces.
func (s *Spaces) QueryFiles() *FilesQuery {
	return (&SpacesClient{s.config}).QueryFiles(s)
}

// Update returns a builder for updating this Spaces.
// Note that, you need to call Spaces.Unwrap() before calling this method, if this Spaces
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Spaces) Update() *SpacesUpdateOne {
	return (&SpacesClient{s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Spaces) Unwrap() *Spaces {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Spaces is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Spaces) String() string {
	var builder strings.Builder
	builder.WriteString("Spaces(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", endpoint=")
	builder.WriteString(s.Endpoint)
	if v := s.CdnEndpoint; v != nil {
		builder.WriteString(", cdn_endpoint=")
		builder.WriteString(*v)
	}
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SpacesSlice is a parsable slice of Spaces.
type SpacesSlice []*Spaces

func (s SpacesSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
