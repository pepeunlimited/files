// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/files/internal/app/app1/ent/files"
	"github.com/pepeunlimited/files/internal/app/app1/ent/predicate"
	"github.com/pepeunlimited/files/internal/app/app1/ent/spaces"
)

// SpacesUpdate is the builder for updating Spaces entities.
type SpacesUpdate struct {
	config
	name              *string
	endpoint          *string
	cdn_endpoint      *string
	clearcdn_endpoint bool
	created_at        *time.Time
	files             map[int]struct{}
	removedFiles      map[int]struct{}
	predicates        []predicate.Spaces
}

// Where adds a new predicate for the builder.
func (su *SpacesUpdate) Where(ps ...predicate.Spaces) *SpacesUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetName sets the name field.
func (su *SpacesUpdate) SetName(s string) *SpacesUpdate {
	su.name = &s
	return su
}

// SetEndpoint sets the endpoint field.
func (su *SpacesUpdate) SetEndpoint(s string) *SpacesUpdate {
	su.endpoint = &s
	return su
}

// SetCdnEndpoint sets the cdn_endpoint field.
func (su *SpacesUpdate) SetCdnEndpoint(s string) *SpacesUpdate {
	su.cdn_endpoint = &s
	return su
}

// SetNillableCdnEndpoint sets the cdn_endpoint field if the given value is not nil.
func (su *SpacesUpdate) SetNillableCdnEndpoint(s *string) *SpacesUpdate {
	if s != nil {
		su.SetCdnEndpoint(*s)
	}
	return su
}

// ClearCdnEndpoint clears the value of cdn_endpoint.
func (su *SpacesUpdate) ClearCdnEndpoint() *SpacesUpdate {
	su.cdn_endpoint = nil
	su.clearcdn_endpoint = true
	return su
}

// SetCreatedAt sets the created_at field.
func (su *SpacesUpdate) SetCreatedAt(t time.Time) *SpacesUpdate {
	su.created_at = &t
	return su
}

// AddFileIDs adds the files edge to Files by ids.
func (su *SpacesUpdate) AddFileIDs(ids ...int) *SpacesUpdate {
	if su.files == nil {
		su.files = make(map[int]struct{})
	}
	for i := range ids {
		su.files[ids[i]] = struct{}{}
	}
	return su
}

// AddFiles adds the files edges to Files.
func (su *SpacesUpdate) AddFiles(f ...*Files) *SpacesUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return su.AddFileIDs(ids...)
}

// RemoveFileIDs removes the files edge to Files by ids.
func (su *SpacesUpdate) RemoveFileIDs(ids ...int) *SpacesUpdate {
	if su.removedFiles == nil {
		su.removedFiles = make(map[int]struct{})
	}
	for i := range ids {
		su.removedFiles[ids[i]] = struct{}{}
	}
	return su
}

// RemoveFiles removes files edges to Files.
func (su *SpacesUpdate) RemoveFiles(f ...*Files) *SpacesUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return su.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SpacesUpdate) Save(ctx context.Context) (int, error) {
	if su.name != nil {
		if err := spaces.NameValidator(*su.name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if su.endpoint != nil {
		if err := spaces.EndpointValidator(*su.endpoint); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"endpoint\": %v", err)
		}
	}
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SpacesUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SpacesUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SpacesUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SpacesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spaces.Table,
			Columns: spaces.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: spaces.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := su.name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: spaces.FieldName,
		})
	}
	if value := su.endpoint; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: spaces.FieldEndpoint,
		})
	}
	if value := su.cdn_endpoint; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: spaces.FieldCdnEndpoint,
		})
	}
	if su.clearcdn_endpoint {
		spec.Fields.Clear = append(spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spaces.FieldCdnEndpoint,
		})
	}
	if value := su.created_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: spaces.FieldCreatedAt,
		})
	}
	if nodes := su.removedFiles; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spaces.FilesTable,
			Columns: []string{spaces.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: files.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := su.files; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spaces.FilesTable,
			Columns: []string{spaces.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: files.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SpacesUpdateOne is the builder for updating a single Spaces entity.
type SpacesUpdateOne struct {
	config
	id                int
	name              *string
	endpoint          *string
	cdn_endpoint      *string
	clearcdn_endpoint bool
	created_at        *time.Time
	files             map[int]struct{}
	removedFiles      map[int]struct{}
}

// SetName sets the name field.
func (suo *SpacesUpdateOne) SetName(s string) *SpacesUpdateOne {
	suo.name = &s
	return suo
}

// SetEndpoint sets the endpoint field.
func (suo *SpacesUpdateOne) SetEndpoint(s string) *SpacesUpdateOne {
	suo.endpoint = &s
	return suo
}

// SetCdnEndpoint sets the cdn_endpoint field.
func (suo *SpacesUpdateOne) SetCdnEndpoint(s string) *SpacesUpdateOne {
	suo.cdn_endpoint = &s
	return suo
}

// SetNillableCdnEndpoint sets the cdn_endpoint field if the given value is not nil.
func (suo *SpacesUpdateOne) SetNillableCdnEndpoint(s *string) *SpacesUpdateOne {
	if s != nil {
		suo.SetCdnEndpoint(*s)
	}
	return suo
}

// ClearCdnEndpoint clears the value of cdn_endpoint.
func (suo *SpacesUpdateOne) ClearCdnEndpoint() *SpacesUpdateOne {
	suo.cdn_endpoint = nil
	suo.clearcdn_endpoint = true
	return suo
}

// SetCreatedAt sets the created_at field.
func (suo *SpacesUpdateOne) SetCreatedAt(t time.Time) *SpacesUpdateOne {
	suo.created_at = &t
	return suo
}

// AddFileIDs adds the files edge to Files by ids.
func (suo *SpacesUpdateOne) AddFileIDs(ids ...int) *SpacesUpdateOne {
	if suo.files == nil {
		suo.files = make(map[int]struct{})
	}
	for i := range ids {
		suo.files[ids[i]] = struct{}{}
	}
	return suo
}

// AddFiles adds the files edges to Files.
func (suo *SpacesUpdateOne) AddFiles(f ...*Files) *SpacesUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return suo.AddFileIDs(ids...)
}

// RemoveFileIDs removes the files edge to Files by ids.
func (suo *SpacesUpdateOne) RemoveFileIDs(ids ...int) *SpacesUpdateOne {
	if suo.removedFiles == nil {
		suo.removedFiles = make(map[int]struct{})
	}
	for i := range ids {
		suo.removedFiles[ids[i]] = struct{}{}
	}
	return suo
}

// RemoveFiles removes files edges to Files.
func (suo *SpacesUpdateOne) RemoveFiles(f ...*Files) *SpacesUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return suo.RemoveFileIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *SpacesUpdateOne) Save(ctx context.Context) (*Spaces, error) {
	if suo.name != nil {
		if err := spaces.NameValidator(*suo.name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if suo.endpoint != nil {
		if err := spaces.EndpointValidator(*suo.endpoint); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"endpoint\": %v", err)
		}
	}
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SpacesUpdateOne) SaveX(ctx context.Context) *Spaces {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SpacesUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SpacesUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SpacesUpdateOne) sqlSave(ctx context.Context) (s *Spaces, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   spaces.Table,
			Columns: spaces.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  suo.id,
				Type:   field.TypeInt,
				Column: spaces.FieldID,
			},
		},
	}
	if value := suo.name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: spaces.FieldName,
		})
	}
	if value := suo.endpoint; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: spaces.FieldEndpoint,
		})
	}
	if value := suo.cdn_endpoint; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: spaces.FieldCdnEndpoint,
		})
	}
	if suo.clearcdn_endpoint {
		spec.Fields.Clear = append(spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: spaces.FieldCdnEndpoint,
		})
	}
	if value := suo.created_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: spaces.FieldCreatedAt,
		})
	}
	if nodes := suo.removedFiles; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spaces.FilesTable,
			Columns: []string{spaces.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: files.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Clear = append(spec.Edges.Clear, edge)
	}
	if nodes := suo.files; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   spaces.FilesTable,
			Columns: []string{spaces.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: files.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		spec.Edges.Add = append(spec.Edges.Add, edge)
	}
	s = &Spaces{config: suo.config}
	spec.Assign = s.assignValues
	spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
