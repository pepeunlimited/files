// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/files/internal/app/ent/dobuckets"
	"github.com/pepeunlimited/files/internal/app/ent/predicate"
)

// DoBucketsUpdate is the builder for updating DoBuckets entities.
type DoBucketsUpdate struct {
	config
	bucket_name       *string
	endpoint          *string
	cdn_endpoint      *string
	clearcdn_endpoint bool
	created_at        *time.Time
	predicates        []predicate.DoBuckets
}

// Where adds a new predicate for the builder.
func (dbu *DoBucketsUpdate) Where(ps ...predicate.DoBuckets) *DoBucketsUpdate {
	dbu.predicates = append(dbu.predicates, ps...)
	return dbu
}

// SetBucketName sets the bucket_name field.
func (dbu *DoBucketsUpdate) SetBucketName(s string) *DoBucketsUpdate {
	dbu.bucket_name = &s
	return dbu
}

// SetEndpoint sets the endpoint field.
func (dbu *DoBucketsUpdate) SetEndpoint(s string) *DoBucketsUpdate {
	dbu.endpoint = &s
	return dbu
}

// SetCdnEndpoint sets the cdn_endpoint field.
func (dbu *DoBucketsUpdate) SetCdnEndpoint(s string) *DoBucketsUpdate {
	dbu.cdn_endpoint = &s
	return dbu
}

// SetNillableCdnEndpoint sets the cdn_endpoint field if the given value is not nil.
func (dbu *DoBucketsUpdate) SetNillableCdnEndpoint(s *string) *DoBucketsUpdate {
	if s != nil {
		dbu.SetCdnEndpoint(*s)
	}
	return dbu
}

// ClearCdnEndpoint clears the value of cdn_endpoint.
func (dbu *DoBucketsUpdate) ClearCdnEndpoint() *DoBucketsUpdate {
	dbu.cdn_endpoint = nil
	dbu.clearcdn_endpoint = true
	return dbu
}

// SetCreatedAt sets the created_at field.
func (dbu *DoBucketsUpdate) SetCreatedAt(t time.Time) *DoBucketsUpdate {
	dbu.created_at = &t
	return dbu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (dbu *DoBucketsUpdate) Save(ctx context.Context) (int, error) {
	if dbu.bucket_name != nil {
		if err := dobuckets.BucketNameValidator(*dbu.bucket_name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"bucket_name\": %v", err)
		}
	}
	if dbu.endpoint != nil {
		if err := dobuckets.EndpointValidator(*dbu.endpoint); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"endpoint\": %v", err)
		}
	}
	return dbu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (dbu *DoBucketsUpdate) SaveX(ctx context.Context) int {
	affected, err := dbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dbu *DoBucketsUpdate) Exec(ctx context.Context) error {
	_, err := dbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dbu *DoBucketsUpdate) ExecX(ctx context.Context) {
	if err := dbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dbu *DoBucketsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dobuckets.Table,
			Columns: dobuckets.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dobuckets.FieldID,
			},
		},
	}
	if ps := dbu.predicates; len(ps) > 0 {
		spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := dbu.bucket_name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: dobuckets.FieldBucketName,
		})
	}
	if value := dbu.endpoint; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: dobuckets.FieldEndpoint,
		})
	}
	if value := dbu.cdn_endpoint; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: dobuckets.FieldCdnEndpoint,
		})
	}
	if dbu.clearcdn_endpoint {
		spec.Fields.Clear = append(spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dobuckets.FieldCdnEndpoint,
		})
	}
	if value := dbu.created_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: dobuckets.FieldCreatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dbu.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DoBucketsUpdateOne is the builder for updating a single DoBuckets entity.
type DoBucketsUpdateOne struct {
	config
	id                int
	bucket_name       *string
	endpoint          *string
	cdn_endpoint      *string
	clearcdn_endpoint bool
	created_at        *time.Time
}

// SetBucketName sets the bucket_name field.
func (dbuo *DoBucketsUpdateOne) SetBucketName(s string) *DoBucketsUpdateOne {
	dbuo.bucket_name = &s
	return dbuo
}

// SetEndpoint sets the endpoint field.
func (dbuo *DoBucketsUpdateOne) SetEndpoint(s string) *DoBucketsUpdateOne {
	dbuo.endpoint = &s
	return dbuo
}

// SetCdnEndpoint sets the cdn_endpoint field.
func (dbuo *DoBucketsUpdateOne) SetCdnEndpoint(s string) *DoBucketsUpdateOne {
	dbuo.cdn_endpoint = &s
	return dbuo
}

// SetNillableCdnEndpoint sets the cdn_endpoint field if the given value is not nil.
func (dbuo *DoBucketsUpdateOne) SetNillableCdnEndpoint(s *string) *DoBucketsUpdateOne {
	if s != nil {
		dbuo.SetCdnEndpoint(*s)
	}
	return dbuo
}

// ClearCdnEndpoint clears the value of cdn_endpoint.
func (dbuo *DoBucketsUpdateOne) ClearCdnEndpoint() *DoBucketsUpdateOne {
	dbuo.cdn_endpoint = nil
	dbuo.clearcdn_endpoint = true
	return dbuo
}

// SetCreatedAt sets the created_at field.
func (dbuo *DoBucketsUpdateOne) SetCreatedAt(t time.Time) *DoBucketsUpdateOne {
	dbuo.created_at = &t
	return dbuo
}

// Save executes the query and returns the updated entity.
func (dbuo *DoBucketsUpdateOne) Save(ctx context.Context) (*DoBuckets, error) {
	if dbuo.bucket_name != nil {
		if err := dobuckets.BucketNameValidator(*dbuo.bucket_name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"bucket_name\": %v", err)
		}
	}
	if dbuo.endpoint != nil {
		if err := dobuckets.EndpointValidator(*dbuo.endpoint); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"endpoint\": %v", err)
		}
	}
	return dbuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (dbuo *DoBucketsUpdateOne) SaveX(ctx context.Context) *DoBuckets {
	db, err := dbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return db
}

// Exec executes the query on the entity.
func (dbuo *DoBucketsUpdateOne) Exec(ctx context.Context) error {
	_, err := dbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dbuo *DoBucketsUpdateOne) ExecX(ctx context.Context) {
	if err := dbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dbuo *DoBucketsUpdateOne) sqlSave(ctx context.Context) (db *DoBuckets, err error) {
	spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dobuckets.Table,
			Columns: dobuckets.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  dbuo.id,
				Type:   field.TypeInt,
				Column: dobuckets.FieldID,
			},
		},
	}
	if value := dbuo.bucket_name; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: dobuckets.FieldBucketName,
		})
	}
	if value := dbuo.endpoint; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: dobuckets.FieldEndpoint,
		})
	}
	if value := dbuo.cdn_endpoint; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: dobuckets.FieldCdnEndpoint,
		})
	}
	if dbuo.clearcdn_endpoint {
		spec.Fields.Clear = append(spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: dobuckets.FieldCdnEndpoint,
		})
	}
	if value := dbuo.created_at; value != nil {
		spec.Fields.Set = append(spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: dobuckets.FieldCreatedAt,
		})
	}
	db = &DoBuckets{config: dbuo.config}
	spec.Assign = db.assignValues
	spec.ScanValues = db.scanValues()
	if err = sqlgraph.UpdateNode(ctx, dbuo.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return db, nil
}
