// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/files/internal/app/ent/dobuckets"
)

// DoBucketsCreate is the builder for creating a DoBuckets entity.
type DoBucketsCreate struct {
	config
	bucket_name  *string
	endpoint     *string
	cdn_endpoint *string
	created_at   *time.Time
}

// SetBucketName sets the bucket_name field.
func (dbc *DoBucketsCreate) SetBucketName(s string) *DoBucketsCreate {
	dbc.bucket_name = &s
	return dbc
}

// SetEndpoint sets the endpoint field.
func (dbc *DoBucketsCreate) SetEndpoint(s string) *DoBucketsCreate {
	dbc.endpoint = &s
	return dbc
}

// SetCdnEndpoint sets the cdn_endpoint field.
func (dbc *DoBucketsCreate) SetCdnEndpoint(s string) *DoBucketsCreate {
	dbc.cdn_endpoint = &s
	return dbc
}

// SetNillableCdnEndpoint sets the cdn_endpoint field if the given value is not nil.
func (dbc *DoBucketsCreate) SetNillableCdnEndpoint(s *string) *DoBucketsCreate {
	if s != nil {
		dbc.SetCdnEndpoint(*s)
	}
	return dbc
}

// SetCreatedAt sets the created_at field.
func (dbc *DoBucketsCreate) SetCreatedAt(t time.Time) *DoBucketsCreate {
	dbc.created_at = &t
	return dbc
}

// Save creates the DoBuckets in the database.
func (dbc *DoBucketsCreate) Save(ctx context.Context) (*DoBuckets, error) {
	if dbc.bucket_name == nil {
		return nil, errors.New("ent: missing required field \"bucket_name\"")
	}
	if err := dobuckets.BucketNameValidator(*dbc.bucket_name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"bucket_name\": %v", err)
	}
	if dbc.endpoint == nil {
		return nil, errors.New("ent: missing required field \"endpoint\"")
	}
	if err := dobuckets.EndpointValidator(*dbc.endpoint); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"endpoint\": %v", err)
	}
	if dbc.created_at == nil {
		return nil, errors.New("ent: missing required field \"created_at\"")
	}
	return dbc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (dbc *DoBucketsCreate) SaveX(ctx context.Context) *DoBuckets {
	v, err := dbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dbc *DoBucketsCreate) sqlSave(ctx context.Context) (*DoBuckets, error) {
	var (
		db   = &DoBuckets{config: dbc.config}
		spec = &sqlgraph.CreateSpec{
			Table: dobuckets.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dobuckets.FieldID,
			},
		}
	)
	if value := dbc.bucket_name; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: dobuckets.FieldBucketName,
		})
		db.BucketName = *value
	}
	if value := dbc.endpoint; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: dobuckets.FieldEndpoint,
		})
		db.Endpoint = *value
	}
	if value := dbc.cdn_endpoint; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: dobuckets.FieldCdnEndpoint,
		})
		db.CdnEndpoint = value
	}
	if value := dbc.created_at; value != nil {
		spec.Fields = append(spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: dobuckets.FieldCreatedAt,
		})
		db.CreatedAt = *value
	}
	if err := sqlgraph.CreateNode(ctx, dbc.driver, spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := spec.ID.Value.(int64)
	db.ID = int(id)
	return db, nil
}
