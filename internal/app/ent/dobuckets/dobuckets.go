// Code generated by entc, DO NOT EDIT.

package dobuckets

import (
	"github.com/pepeunlimited/files/internal/app/ent/schema"
)

const (
	// Label holds the string label denoting the dobuckets type in the database.
	Label = "do_buckets"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBucketName holds the string denoting the bucket_name vertex property in the database.
	FieldBucketName = "bucket_name"
	// FieldEndpoint holds the string denoting the endpoint vertex property in the database.
	FieldEndpoint = "endpoint"
	// FieldCdnEndpoint holds the string denoting the cdn_endpoint vertex property in the database.
	FieldCdnEndpoint = "cdn_endpoint"
	// FieldCreatedAt holds the string denoting the created_at vertex property in the database.
	FieldCreatedAt = "created_at"

	// Table holds the table name of the dobuckets in the database.
	Table = "do_buckets"
)

// Columns holds all SQL columns are dobuckets fields.
var Columns = []string{
	FieldID,
	FieldBucketName,
	FieldEndpoint,
	FieldCdnEndpoint,
	FieldCreatedAt,
}

var (
	fields = schema.DoBuckets{}.Fields()

	// descBucketName is the schema descriptor for bucket_name field.
	descBucketName = fields[0].Descriptor()
	// BucketNameValidator is a validator for the "bucket_name" field. It is called by the builders before save.
	BucketNameValidator = func() func(string) error {
		validators := descBucketName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(bucket_name string) error {
			for _, fn := range fns {
				if err := fn(bucket_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()

	// descEndpoint is the schema descriptor for endpoint field.
	descEndpoint = fields[1].Descriptor()
	// EndpointValidator is a validator for the "endpoint" field. It is called by the builders before save.
	EndpointValidator = func() func(string) error {
		validators := descEndpoint.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(endpoint string) error {
			for _, fn := range fns {
				if err := fn(endpoint); err != nil {
					return err
				}
			}
			return nil
		}
	}()
)
