// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/files/internal/app/ent/dobuckets"
)

// DoBuckets is the model entity for the DoBuckets schema.
type DoBuckets struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BucketName holds the value of the "bucket_name" field.
	BucketName string `json:"bucket_name,omitempty"`
	// Endpoint holds the value of the "endpoint" field.
	Endpoint string `json:"endpoint,omitempty"`
	// CdnEndpoint holds the value of the "cdn_endpoint" field.
	CdnEndpoint *string `json:"cdn_endpoint,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DoBuckets) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},
		&sql.NullString{},
		&sql.NullString{},
		&sql.NullString{},
		&sql.NullTime{},
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DoBuckets fields.
func (db *DoBuckets) assignValues(values ...interface{}) error {
	if m, n := len(values), len(dobuckets.Columns); m != n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	db.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field bucket_name", values[0])
	} else if value.Valid {
		db.BucketName = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field endpoint", values[1])
	} else if value.Valid {
		db.Endpoint = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field cdn_endpoint", values[2])
	} else if value.Valid {
		db.CdnEndpoint = new(string)
		*db.CdnEndpoint = value.String
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[3])
	} else if value.Valid {
		db.CreatedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this DoBuckets.
// Note that, you need to call DoBuckets.Unwrap() before calling this method, if this DoBuckets
// was returned from a transaction, and the transaction was committed or rolled back.
func (db *DoBuckets) Update() *DoBucketsUpdateOne {
	return (&DoBucketsClient{db.config}).UpdateOne(db)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (db *DoBuckets) Unwrap() *DoBuckets {
	tx, ok := db.config.driver.(*txDriver)
	if !ok {
		panic("ent: DoBuckets is not a transactional entity")
	}
	db.config.driver = tx.drv
	return db
}

// String implements the fmt.Stringer.
func (db *DoBuckets) String() string {
	var builder strings.Builder
	builder.WriteString("DoBuckets(")
	builder.WriteString(fmt.Sprintf("id=%v", db.ID))
	builder.WriteString(", bucket_name=")
	builder.WriteString(db.BucketName)
	builder.WriteString(", endpoint=")
	builder.WriteString(db.Endpoint)
	if v := db.CdnEndpoint; v != nil {
		builder.WriteString(", cdn_endpoint=")
		builder.WriteString(*v)
	}
	builder.WriteString(", created_at=")
	builder.WriteString(db.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DoBucketsSlice is a parsable slice of DoBuckets.
type DoBucketsSlice []*DoBuckets

func (db DoBucketsSlice) config(cfg config) {
	for _i := range db {
		db[_i].config = cfg
	}
}
